import heapq

def best_first_search(graph, start, goal, heuristic):
    # Priority queue to store nodes to explore, initialized with the start node
    priority_queue = [(heuristic[start], start)]
    visited = set()
    came_from = {}  # For path reconstruction
    
    while priority_queue:
        # Get the node with the lowest heuristic
        current_h, current_node = heapq.heappop(priority_queue)
        
        # If the goal is reached, reconstruct and return the path
        if current_node == goal:
            path = []
            while current_node in came_from:
                path.append(current_node)
                current_node = came_from[current_node]
            path.append(start)
            return path[::-1]  # Reverse path for start-to-goal order
        
        # Mark current node as visited
        visited.add(current_node)
        
        # Explore neighbors
        for neighbor, cost in graph[current_node]:
            if neighbor not in visited:
                came_from[neighbor] = current_node
                heapq.heappush(priority_queue, (heuristic[neighbor], neighbor))
    
    return "No path found"  # If goal is not reachable

# Test Best-First Search
print("Best-First Search Path:", best_first_search(graph, 'A', 'G', heuristic))



//Explanation
Best-First Search is a search algorithm that uses a heuristic function to guide the search toward the goal. Unlike A* Search, which combines the cost to reach a node and an estimated cost to the goal, Best-First Search considers only the heuristic function to choose the next node to explore. This often makes it faster than A*, but it doesn't always guarantee finding the optimal path.

### **Overview of Best-First Search**

In Best-First Search:
- Nodes are prioritized based solely on their heuristic estimate to the goal.
- The algorithm always picks the node with the lowest heuristic value (i.e., the "best" guess) to move closer to the goal.
- It’s especially useful when we want a quick solution and are not as concerned with finding the shortest or optimal path.

The main idea is to expand the node that seems most promising according to the heuristic function, hoping it leads directly to the goal.

---

### **Steps of Best-First Search**

#### **Input**:
- A graph (nodes and edges).
- A start node and a goal node.
- A heuristic function `h(n)` that estimates the cost from any node `n` to the goal.

#### **Output**:
- A path from the start to the goal if one exists, or a message indicating that no path was found.

#### **Steps**:

1. **Initialize**:
   - Create a priority queue and insert the start node with its heuristic value, `h(start)`.
   - Maintain a `visited` set to keep track of visited nodes.
   - Use a dictionary `came_from` to store each node's parent, for path reconstruction.

2. **Loop**:
   - While the priority queue is not empty:
     - Remove the node with the lowest heuristic value (let’s call it `current`).
     - If `current` is the goal node, reconstruct and return the path.
     - Add `current` to the `visited` set.
     - For each neighbor of `current`:
       - If the neighbor has not been visited:
         - Add or update the neighbor in the priority queue with its heuristic value, `h(neighbor)`.
         - Record the current node as the parent of this neighbor in `came_from`.

3. **Path Reconstruction**:
   - Once the goal node is reached, use `came_from` to backtrack from the goal to the start, constructing the path.

4. **End Condition**:
   - If the priority queue is empty and the goal hasn't been reached, return a message indicating that no path exists.

---

### **Best-First Search Pseudocode**

```plaintext
Best_First_Search(graph, start, goal, heuristic):
    priority_queue = PriorityQueue()
    priority_queue.enqueue(start, heuristic[start])
    visited = set()
    came_from = {}

    while priority_queue is not empty:
        current = priority_queue.dequeue()  // Node with lowest heuristic
        
        if current == goal:
            return reconstruct_path(came_from, start, goal)
        
        visited.add(current)

        for each neighbor in graph[current]:
            if neighbor not in visited:
                came_from[neighbor] = current
                priority_queue.enqueue(neighbor, heuristic[neighbor])
    
    return "No path found"  // If goal is not reachable

reconstruct_path(came_from, start, goal):
    path = []
    current = goal
    while current in came_from:
        path.append(current)
        current = came_from[current]
    path.append(start)
    return path[::-1]  // Reverse the path for start-to-goal order
```

---

### **Explanation of the Pseudocode**

- **Priority Queue**:
  - The priority queue orders nodes by their heuristic values, so nodes closer to the goal (according to the heuristic) are expanded first.
  
- **Visited Set**:
  - This set ensures that each node is processed only once, preventing cycles and redundant work.

- **Path Reconstruction**:
  - The `came_from` dictionary stores each node’s parent. Once the goal node is reached, this allows backtracking to build the full path from the start to the goal.

### **Example Heuristic**

Consider using an **Euclidean** or **Manhattan Distance** heuristic for Best-First Search in a grid layout:
- **Manhattan Distance**: \( h(n) = |x_{\text{goal}} - x_n| + |y_{\text{goal}} - y_n| \)
- **Euclidean Distance**: \( h(n) = \sqrt{(x_{\text{goal}} - x_n)^2 + (y_{\text{goal}} - y_n)^2} \)

This estimate can guide the algorithm towards the goal, especially when the grid layout allows moving in four or eight directions.

---

### **Limitations of Best-First Search**

- **Non-Optimal Solutions**: Since it only considers the heuristic, it may overlook shorter paths in favor of paths that seem more promising based on the heuristic alone.
- **Incomplete Search**: Best-First Search does not guarantee it will find a path if one exists, particularly if the heuristic is misleading.

---

### **Key Points**

1. **Heuristic-Driven**: Best-First Search is fast because it only uses the heuristic to guide the search.
2. **Greedy Approach**: It can reach the goal quickly but may not find the shortest or best path.
3. **Performance**: Works well when a quick solution is needed, but it's less suitable when optimality is a priority.

Best-First Search is especially helpful in scenarios where a heuristic gives a reliable estimate, and finding a solution quickly is more important than finding the shortest solution. Let me know if you have further questions on this!